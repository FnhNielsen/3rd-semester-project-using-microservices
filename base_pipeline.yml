### Default ###
stages:
  - build
  - deploy
  - test

variables:
  # Setting variable to set up the pipeline for a repository
  CI_CD_PRODUCTION_BRANCH: main
  CI_CD_DEVELOPMENT_BRANCH: dev
  CI_CD_RELEASE_BRANCH: release
  CI_CD_HOTFIX_BRANCH: hotfix
  CI_CD_TEST_IMAGE_PRE: "test-image/"
  CI_CD_PRODUCTION_IMAGE_PRE: ""
  CI_CD_TOOL_DEBUG: "false"
  # Setting variable to set up the base pipeline
  CI_CD_BASE_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/base_image:4.0.12
  CI_CD_DOCKER_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/docker:4.0.12
  CI_CD_KUBE_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/kube:3.0.12
  # These variables are handled by the base pipeline and must not be changed
  CI_CD_TAG: $CI_PIPELINE_ID
  CI_CD_KUBE_CONFIG: ""
  CI_CD_PRE_IMAGE_NAME: $CI_CD_TEST_IMAGE_PRE
  # All variables below come from Ahmad
  # https://discord.com/channels/881855784873496596/888744242720165948/907304043808948255
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: $DOCKER_TLS_CERTDIR/client

# Default
workflow:
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      variables:
        CI_CD_KUBE_CONFIG: "$CI_PROJECT_DIR.tmp/CI_CD_STAGING_KUBECONFIG"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      variables:
        CI_CD_KUBE_CONFIG: "$CI_PROJECT_DIR.tmp/CI_CD_PRODUCTION_KUBECONFIG"
        CI_CD_TEST_IMAGE_PRE: ""
        CI_CD_PRE_IMAGE_NAME: $CI_CD_PRODUCTION_IMAGE_PRE

default:
  image: $CI_CD_BASE_IMAGE
  artifacts:
    name: job-${CI_JOB_NAME}-failed-commit-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${CI_PROJECT_DIR}/
    exclude:
      - ${CI_PROJECT_DIR}/.git/**/*
    untracked: true
    when: on_failure
    expire_in: 8 hrs

### Rules ###
# Run rules
.merge_request_production:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.merge_production:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.except_merge_production:
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: on_success
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: on_success
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.except_development:
  rules:
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.always_merge_request_production:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: always

.always_except_merge_production:
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: always
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: always
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: always
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: always

# Job rules
.build:
  stage: build
  allow_failure: false

.unit:
  stage: test
  extends:
    - .except_merge_production
  allow_failure: false

.acceptance:
  stage: test
  extends:
    - .merge_request_production
  allow_failure: false

.integration:
  stage: test
  extends:
    - .merge_request_production
  allow_failure: false

.performance:
  stage: test
  extends:
    - .merge_request_production
  allow_failure: false

.deploy:
  stage: deploy
  extends:
    - .except_development
  allow_failure: false

.cleanup:
  stage: .post
  extends:
    - .always_except_merge_production
  allow_failure: true

### Methods ###
.artifact:
  # Artifact method to use in jobs that create new files to be used in other jobs
  artifacts:
    name: job-${CI_JOB_NAME}-commit-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${CI_PROJECT_DIR}/
    exclude:
      - ${CI_PROJECT_DIR}/.git/**/*
    untracked: true
    when: always
    expire_in: 3 hrs

.build_image:
  # Variables
  #
  # CI_CD_IMAGE_NAME: (string) [Required]
  # CI_CD_FILE_NAME: (string) [Optional]
  #   Default: Dockerfile
  # CI_CD_PATH: (string) [Optional]
  #   Default: .
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  variables:
    CI_CD_FILE_NAME: Dockerfile
    CI_CD_PATH: .
  before_script:
    # Sometimes the pipeline is faster than /certs/client/ca.pem becomes available.
    # This cmd is used for waiting on /certs/client/ca.pem to become available,
    # in order to prevent Docker failure when /certs/client/ca.pem is not available.
    - certs_check
  script:
    # Get version and set CI_CD_TAG with version if the pipeline is deploying to production
    - if [ "${CI_PIPELINE_SOURCE}" == "push" ] && [ "${CI_COMMIT_REF_NAME}" == "${CI_CD_PRODUCTION_BRANCH}" ]; then
        for version in ${CI_COMMIT_DESCRIPTION}; do break; done;
        CI_CD_TAG=$(ci_cd_tool version normalize "${version}");
      fi
    # Checks if the image is in the registry
    - result=$(ci_cd_tool registry exist "${CI_CD_PRE_IMAGE_NAME}${CI_CD_IMAGE_NAME}" "${CI_CD_TAG}");
      if [ "${result}" == "Docker image already exist." ]; then
        echo ${result};
        exit 1;
      fi
    # Login to the docker registry
    - ci_cd_tool docker login "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    # Create docker image
    - ci_cd_tool docker create "${CI_REGISTRY_IMAGE}/${CI_CD_PRE_IMAGE_NAME}${CI_CD_IMAGE_NAME}:${CI_CD_TAG}" "${CI_CD_FILE_NAME}" "${CI_CD_PATH}"
    # Push docker image to registry
    - ci_cd_tool docker push "${CI_REGISTRY_IMAGE}/${CI_CD_PRE_IMAGE_NAME}${CI_CD_IMAGE_NAME}:${CI_CD_TAG}"

.remove_test_image_if_exist:
  # Variable
  #
  # CI_CD_IMAGE_NAME: (string) [Required]
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  before_script:
    # Sometimes the pipeline is faster than /certs/client/ca.pem becomes available.
    # This cmd is used for waiting on /certs/client/ca.pem to become available,
    # in order to prevent Docker failure when /certs/client/ca.pem is not available.
    - certs_check
  script:
    # Checks if the image is in the registry
    - result=$(ci_cd_tool registry exist "${CI_CD_PRE_IMAGE_NAME}${CI_CD_IMAGE_NAME}" "${CI_CD_TAG}");
      if [ "${result}" == "Docker image does not exist." ]; then
        echo ${result};
        exit 0;
      fi
    # Login to the docker registry
    - ci_cd_tool docker login "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    # Remove image from registry
    - ci_cd_tool registry remove "${CI_CD_PRE_IMAGE_NAME}${CI_CD_IMAGE_NAME}" "${CI_CD_TAG}"

.kube:
  # Variables
  #
  # CI_CD_KUBE_FILE: (string) [Required]
  # CI_CD_CONTAINER_IMAGES: (json) [Optional]
  #   E.g.
  #     [
  #       {"type": "Deployment", "container": "t12-api", "image": "api"},
  #       {"type": "Deployment", "container": "t12-database", "image": "database"}
  #     ]
  # CI_CD_TIMEOUT: (string) [Optional]
  #   Default: .
  #   E.g. 5m or 10s ect..
  #
  image: $CI_CD_KUBE_IMAGE
  variables:
    CI_CD_CONTAINER_IMAGES: "[]"
    CI_CD_TIMEOUT: "3m"
  script:
    # Get version and set CI_CD_TAG and add git tag with version if the pipeline is deploying to production
    - if [ "${CI_PIPELINE_SOURCE}" == "push" ] && [ "${CI_COMMIT_REF_NAME}" == "${CI_CD_PRODUCTION_BRANCH}" ]; then
        for version in ${CI_COMMIT_DESCRIPTION}; do break; done;
        CI_CD_TAG=$(ci_cd_tool version normalize "${version}");

        ci_cd_tool git tag "${CI_CD_TAG}";
      fi
    # Set docker image
    - for row in $(echo "${CI_CD_CONTAINER_IMAGES}" | jq -r ".[] | @base64"); do
        _jq () { echo "${row}" | base64 -d | jq -r "$1"; };
        ci_cd_tool kube image "${CI_CD_KUBE_FILE}" "$(_jq '.type')" "$(_jq '.container')" "${CI_REGISTRY_IMAGE}/${CI_CD_PRE_IMAGE_NAME}$(_jq '.image'):${CI_CD_TAG}";
      done
    # Deploying to staging or production
    - ci_cd_tool kube apply "${CI_CD_KUBE_FILE}" "${CI_CD_KUBE_CONFIG}"
    # 1. Get status if any pods are rolled out
    # 2. Print a description for log purposes
    - FAILURE_STATUS=0;
      ci_cd_tool kube status "${CI_CD_KUBE_FILE}" "${CI_CD_KUBE_CONFIG}" "${CI_CD_TIMEOUT}" || FAILURE_STATUS=$?;
      ci_cd_tool kube outcome "${CI_CD_KUBE_FILE}" "${CI_CD_KUBE_CONFIG}";
      exit ${FAILURE_STATUS};

.kube_monitor:
  # Variables
  #
  # CI_CD_KUBE_FILES: (string) [Required]
  #   E.g. Only one file
  #     kube/api.yml
  #   E.g. Multiple files at once
  #     kube/api.yml kube/database.yml
  # CI_CD_TIME: (string) [Optional]
  #   E.g. 10m or 100s
  #
  image: $CI_CD_KUBE_IMAGE
  variables:
    CI_CD_TIME: "3m"
  script:
    - ci_cd_tool kube monitor "${CI_CD_KUBE_FILES}" "${CI_CD_KUBE_CONFIG}" "${CI_CD_TIME}" 

.kube_top:
  # Variable
  #
  # CI_CD_KUBE_FILES: (string) [Required]
  #   E.g. Only one file
  #     kube/api.yml
  #   E.g. Multiple files at once
  #     kube/api.yml kube/database.yml
  #
  image: $CI_CD_KUBE_IMAGE
  script:
    - sleep 60
    - for file in ${CI_CD_KUBE_FILES}; do
        ci_cd_tool kube top "${file}" "${CI_CD_KUBE_CONFIG}";
      done

.kube_delete:
  # Variable
  #
  # CI_CD_KUBE_FILES: (string) [Required]
  #   E.g. Only one file
  #     kube/api.yml
  #   E.g. Multiple files at once
  #     kube/common.yaml kube/api.yml kube/database.yml
  #
  image: $CI_CD_KUBE_IMAGE
  script:
    - for file in ${CI_CD_KUBE_FILES}; do
        ci_cd_tool kube delete "${file}" "${CI_CD_KUBE_CONFIG}";
      done

### Static Jobs ###
test:check_request_title:
  # NOTE: Implement check new version is newer that the old version by using git tag from production branch
  stage: test
  extends:
    - .merge_request_production
  needs: []
  script:
    - ci_cd_tool version validate ${CI_MERGE_REQUEST_TITLE}

setup:stage_env:
  stage: .pre
  extends:
    - .merge_request_production
  needs: []
  script:
    - echo "init_stage"