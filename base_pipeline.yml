### Default ###
stages:
  - build
  - test
  - deliver
  - finish

variables:
  CI_CD_PRODUCTION_BRANCH: main
  CI_CD_DEVELOPMENT_BRANCH: dev
  CI_CD_RELEASE_BRANCH: release
  CI_CD_HOTFIX_BRANCH: hotfix
  CI_CD_GUIDE_URL: https://gitlab.sdu.dk/semester-project-e2021/team-12/ci-cd/-/wikis/Guide
  CI_CD_TEST_IMAGE_GROUP: test-image
  CI_CD_BASE_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/base_image:1.0.34
  CI_CD_DOCKER_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/docker:1.0.54
  CI_CD_TOOL_DEBUG: "true"
  # All variables below come from Ahmad
  # https://discord.com/channels/881855784873496596/888744242720165948/907304043808948255
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: $DOCKER_TLS_CERTDIR/client

# Standard job image
image: $CI_CD_BASE_IMAGE

### Rules ###
# Trigger rules
.default:
  allow_failure: false
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: on_success
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: on_success
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.merge_request_production:
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.merge_production:
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_BUILD_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.always_except_merge_production:
  allow_failure: false
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: always
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: always
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: always
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: always

.failure:
  allow_failure: false
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_failure
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_failure
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: on_failure
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: on_failure
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_failure

# Jobs rules
.build:
  stage: build
  extends: .default

.unit:
  stage: test
  extends: .default

.acceptance:
  stage: test
  extends: .merge_request_production

.integration:
  stage: test
  extends: .merge_request_production

.performance:
  stage: test
  extends: .merge_request_production

.deliver:
  stage: deliver
  extends: .merge_production

.finish:
  stage: finish
  extends: .always_except_merge_production

### Methods ###
.test_image:
  # Variables
  #
  # CI_CD_IMAGE_NAME: (string)
  #   Required
  # CI_CD_PATH: (string)
  #   Default: .
  # CI_CD_FILE_NAME: (string)
  #   Default: Dockerfile
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  script:
    - ci_cd_tool test
  resource_group: docker_image

.remove_test_image:
  # Variable
  #
  # CI_CD_IMAGE_NAME: (string)
  #   Required
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  script:
    - ci_cd_tool
  resource_group: docker_image

.production_image:
  # Variable
  #
  # CI_CD_IMAGE_NAME: (string)
  #   Required
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  script:
    - ci_cd_tool production
  resource_group: docker_image

.artifact:
  artifacts:
    name: branch-${CI_COMMIT_REF_NAME}-commit-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${CI_BUILDS_DIR}/${CI_PROJECT_PATH}
    expire_in: 3 hrs

### Jobs ###
build:check_request_title:
  extends:
    - .build
    - .merge_request_production
  script:
    - ci_cd_tool version

finish:failure:
  extends:
    - .finish
    - .failure
    - .artifact
  script: echo "Create artifact"
  artifacts:
    expire_in: 8 hrs
