### Default ###
stages:
  - build
  - deploy
  - test

variables:
  CI_CD_PRODUCTION_BRANCH: main
  CI_CD_DEVELOPMENT_BRANCH: dev
  CI_CD_RELEASE_BRANCH: release
  CI_CD_HOTFIX_BRANCH: hotfix
  CI_CD_GUIDE_URL: https://gitlab.sdu.dk/semester-project-e2021/team-12/ci-cd/-/wikis/Guide
  CI_CD_TEST_IMAGE_GROUP: test-image
  CI_CD_BASE_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/base_image:2.0.0
  CI_CD_DOCKER_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/docker:2.0.4
  CI_CD_KUBE_IMAGE: gitlab.sdu.dk:5050/semester-project-e2021/team-12/ci-cd/kube:1.0.3
  CI_CD_TOOL_DEBUG: "true"
  CI_CD_TAG: $CI_PIPELINE_ID
  CI_CD_KUBE_CONFIG: ""
  # All variables below come from Ahmad
  # https://discord.com/channels/881855784873496596/888744242720165948/907304043808948255
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: $DOCKER_TLS_CERTDIR/client

# Default
workflow:
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      variables:
        CI_CD_KUBE_CONFIG: $CI_CD_STAGING_KUBECONFIG
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_BUILD_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      variables:
        CI_CD_KUBE_CONFIG: $CI_CD_PRODUCTION_KUBECONFIG

default:
  image: $CI_CD_BASE_IMAGE
  artifacts:
    name: job-${CI_JOB_NAME}-failed-commit-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${CI_BUILDS_DIR}/${CI_PROJECT_PATH}
    exclude:
      - ${CI_BUILDS_DIR}/${CI_PROJECT_PATH}/.git
    when: on_failure
    expire_in: 8 hrs

### Rules ###
# Trigger rules
.production:
  allow_failure: false
  rules:
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_BUILD_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.merge_request_production:
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.merge_production:
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_BUILD_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.except_merge_production:
  allow_failure: false
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: on_success
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: on_success
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.except_development:
  allow_failure: false
  rules:
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_BUILD_REF_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.always_merge_request_production:
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

.always_except_merge_production:
  allow_failure: false
  rules:
    # development
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_CD_DEVELOPMENT_BRANCH
      when: on_success
    # release
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_RELEASE_BRANCH/
      when: on_success
    # hotfix
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^$CI_CD_HOTFIX_BRANCH/
      when: on_success
    # production
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_CD_PRODUCTION_BRANCH
      when: on_success

# Job rules
.build:
  stage: build
  allow_failure: false

.unit:
  stage: test
  allow_failure: false

.acceptance:
  stage: test
  extends:
    - .merge_request_production

.integration:
  stage: test
  extends:
    - .merge_request_production

.performance:
  stage: test
  extends:
    - .merge_request_production

.deploy:
  stage: deploy
  extends:
    - .production

.delete_test_image:
  stage: .post
  extends:
    - .always_except_merge_production

### Methods ###
.artifact:
  artifacts:
    name: job-${CI_JOB_NAME}-commit-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${CI_BUILDS_DIR}/${CI_PROJECT_PATH}
    untracked: true
    expire_in: 3 hrs

.build_image:
  # Variables
  #
  # CI_CD_IMAGE_NAME: (string) [Required]
  # CI_CD_FILE_NAME: (string) [Optional]
  #   Default: Dockerfile
  # CI_CD_PATH: (string) [Optional]
  #   Default: .
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  variables:
    CI_CD_FILE_NAME: Dockerfile
    CI_CD_PATH: .
  before_script:
    - certs_check
  script:
    - if [ "${CI_PIPELINE_SOURCE}" == "push" ] && [ "${CI_BUILD_REF_NAME}" == "${CI_CD_PRODUCTION_BRANCH}" ]; then
        for version in ${CI_COMMIT_DESCRIPTION}; do break; done;
        CI_CD_TAG=$(ci_cd_tool version normalize ${version});
      fi
    - result=$(ci_cd_tool registry exist ${CI_CD_IMAGE_NAME} ${CI_CD_TAG});
      [ "${result}" == "Docker image already exist." ] && echo ${result} && exit 1;
    - ci_cd_tool docker login ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - ci_cd_tool docker create ${CI_REGISTRY_IMAGE}/${CI_CD_IMAGE_NAME}:${CI_CD_TAG} ${CI_CD_FILE_NAME} ${CI_CD_PATH}
    - ci_cd_tool docker push ${CI_REGISTRY_IMAGE}/${CI_CD_IMAGE_NAME}:${CI_CD_TAG}

.remove_test_image:
  # Variable
  #
  # CI_CD_IMAGE_NAME: (string) [Required]
  #
  image: $CI_CD_DOCKER_IMAGE
  services:
    - docker:dind
  before_script:
    - certs_check
  script:
    - result=$(ci_cd_tool registry exist ${CI_CD_IMAGE_NAME} ${CI_CD_TAG});
      [ "${result}" == "Docker image does not exist." ] && echo ${result} && exit 1;
    - ci_cd_tool docker login ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - ci_cd_tool registry remove ${CI_CD_IMAGE_NAME} ${CI_CD_TAG}

.kube:
  # Variable
  #
  # CI_CD_KUBE_FILE: (string) [Required]
  # CI_CD_CONTAINER_IMAGES: (json) [Optional]
  #   E.g.
  #     [
  #       {"container": "t12-api", "image": "api"},
  #       {"container": "t12-database", "image": "database"}
  #     ]
  #
  image: $CI_CD_KUBE_IMAGE
  variables:
    CI_CD_CONTAINER_IMAGES: "[]"
  script:
    - if [ "${CI_PIPELINE_SOURCE}" == "push" ] && [ "${CI_BUILD_REF_NAME}" == "${CI_CD_PRODUCTION_BRANCH}" ]; then
        for version in ${CI_COMMIT_DESCRIPTION}; do break; done;
        CI_CD_TAG=$(ci_cd_tool version normalize ${version});

        ci_cd_tool git tag ${CI_CD_TAG};
      fi
    - for row in $(echo "${CI_CD_CONTAINER_IMAGES}" | jq -r ".[] | @base64"); do
        _jq () { echo "${row}" | base64 -d | jq -r "$1"; };
        ci_cd_tool kube image ${CI_CD_KUBE_FILE} $(_jq ".container") ${CI_REGISTRY_IMAGE}/$(_jq ".image"):${CI_CD_TAG};
      done
    - ci_cd_tool kube apply ${CI_CD_KUBE_FILE} ${CI_CD_KUBE_CONFIG}

### Static Jobs ###
test:check_request_title:
  # NOTE: Implement check new version is newer that the old version by using git tag from production branch
  stage: test
  extends:
    - .merge_request_production
  needs: []
  script:
    - ci_cd_tool version validate ${CI_MERGE_REQUEST_TITLE}

setup:state:
  stage: .pre
  extends:
    - .merge_request_production
  needs: []
  script:
    - echo "init_state"

cleanup:state:
  stage: .post
  extends:
    - .always_merge_request_production
  needs:
    - setup:state
  script:
    - echo "takedown_state"
